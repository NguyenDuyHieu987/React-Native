(function () {
  var sax;

  if (
    typeof module !== "undefined" &&
    module.exports &&
    !global.xmldocAssumeBrowser
  ) {
    // We're being used in a Node-like environment
    sax = require("sax");
  } else {
    // assume it's attached to the Window object in a browser
    sax = this.sax;

    if (!sax) {
      // no sax for you!
      throw new Error(
        "Expected sax to be defined. Make sure you're including sax.js before this file.",
      );
    }
  }

  /*
   * XmlElement is our basic building block. Everything is an XmlElement; even XmlDocument
   * behaves like an XmlElement by inheriting its attributes and functions.
   */

  function XmlElement(tag) {
    // Capture the parser object off of the XmlDocument delegate
    var parser = delegates[delegates.length - 1].parser;

    this.name = tag.name;
    this.attr = tag.attributes;
    this.val = "";
    this.children = [];
    this.firstChild = null;
    this.lastChild = null;

    // Assign parse information
    this.line = parser.line;
    this.column = parser.column;
    this.position = parser.position;
    this.startTagPosition = parser.startTagPosition;
  }

  // Private methods

  XmlElement.prototype._addChild = function (child) {
    // add to our children array
    this.children.push(child);

    // update first/last pointers
    if (!this.firstChild) this.firstChild = child;
    this.lastChild = child;
  }